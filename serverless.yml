# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: keendly-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  stage: dev
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: build/distributions/keendly-api.zip

functions:
  login:
    memorySize: 512
    timeout: 10
    handler: com.keendly.api.RequestHandler
    environment:
      AUTH_KEY: ${env:AUTH_KEY}
    events:
      - http:
          path: /login
          method: get
  deliveries:
    role: arn:aws:iam::625416862388:role/lambda_s3_exec_role
    memorySize: 512
    timeout: 10
    handler: com.keendly.api.RequestHandler
    environment:
      INOREADER_URL: ${env:INOREADER_URL}
      INOREADER_AUTH_URL: ${env:INOREADER_AUTH_URL}
      INOREADER_CLIENT_ID: ${env:INOREADER_CLIENT_ID}
      INOREADER_CLIENT_SECRET: ${env:INOREADER_CLIENT_SECRET}
      INOREADER_REDIRECT_URI: ${env:INOREADER_REDIRECT_URI}
    events:
      - http:
          path: /deliveries/{proxy+}
          method: any
          authorizer: authorizer
  authorizer:
    handler: com.keendly.auth.AuthorizerHandler
    environment:
      AUTH_KEY: ${env:AUTH_KEY}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
